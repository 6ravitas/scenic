#
#  Created by Boyd Multerer on 5/12/17.
#  Copyright Â© 2017 Kry10 Industries. All rights reserved.
#

defmodule Scenic.Primitive.Style.Font do
  use Scenic.Primitive.Style
#  alias Scenic.Primitive.Style

# import IEx

#  @dflag            Style.dflag()
#  @type_code        0x0040

#  @tt_signature     <<0, 1, 0, 0>>

#  @error_msg_base     "#{IO.ANSI.red}Invalid Font file - "
#  @error_msg_enoent   @error_msg_base <> "File does not exist\n"
#  @error_msg_eisdir   @error_msg_base <> "Requested path is a directory\n"
#  @error_msg_not_ttf  @error_msg_base <> "Not a TrueType font\n"

  #===========================================================================
  # define a policy error here - not found or something like that
  defmodule FileError do
    defexception [
      message:  "#{IO.ANSI.red}Invalid Font file\n",
      path:     nil,
      err:      nil
    ]
  end




  #============================================================================
  # data verification and serialization

  #--------------------------------------------------------
  def info(),     do: "Style :font -- not really supported"
  def verify(_),  do: false


  #--------------------------------------------------------
  def serialize( width ) do
    { :ok, << width :: size(8) >> }
  end

  #--------------------------------------------------------
  def deserialize( binary_data )
  def deserialize( <<
      width   :: size(8),
      bin     :: binary
    >> ) do
    {:ok, width, bin}
  end
  def deserialize( binary_data ), do: {:err_invalid, binary_data }



















#  #----------------------------------------------------------------------------
#  def build( point_size, font_path )
#  def build( point_size, path ) when is_float(point_size), do: build( trunc(point_size), path )
#  def build( point_size, path ) when is_integer(point_size) and is_bitstring(path) do
#    # for testing the font file, make the path absolute,
#    # rooted on the top level app
##    absolute_path = root_app_path() <> "/" <> path
##    with {:ok, file}          <- :file.open(absolute_path, [:read, :binary]),
#    with {:ok, file}          <- :file.open(path, [:read, :binary]),
#         {:ok, 0}             <- :file.position(file, 0),
#         {:ok, @tt_signature} <- :file.read(file, 4) do
#      { __MODULE__, build_internal( point_size, path ) }
#    else
#      {:error, :enoent} ->  {:error, :enoent, @error_msg_enoent }
#      {:error, :eisdir} ->  {:error, :eisdir, @error_msg_eisdir }
#      {:ok, _} ->           {:error, :einval, @error_msg_not_ttf }
#      other ->              other
#    end
#  end
#
#  #----------------------------------------------------------------------------
#  def build!( point_size, font_path )
#  def build!( point_size, path ) do
#    case build( point_size, path ) do
#      {:error, err, msg} ->  raise FileError, message: msg, path: path, err: err
#      font ->         font
#    end
#  end
#
#  #----------------------------------------------------------------------------
#  def get( {__MODULE__, <<
#      @dflag      :: size(8),
#      @type_code  :: unsigned-integer-size(16)-native,
#      point_size  :: unsigned-integer-size(8)-native,
#      _           :: unsigned-integer-size(16)-native,
#      path        :: binary
#    >>} ),
#    do: {point_size, path}
#
#  #----------------------------------------------------------------------------
#  def put( style, size_or_path )
#  def put( style, size ) when is_float(size), do: put( style, trunc(size) )
#  def put( style, size ) when is_integer(size) do
#    {_, font_path} = get( style )
#    # font family is not changing, so shortcut the file checking...
#    { __MODULE__, build_internal( size, font_path ) }
#  end
#
#  def put( style, font_path ) when is_bitstring(font_path) do
#    {size, _} = get( style )
#    put( style, size, font_path )
#  end
#
#  #----------------------------------------------------------------------------
#  def put( style, point_size, font_path)
#  def put( {__MODULE__, _} = style, point_size, font_path ) do
#    case get( style ) do
#      # if the font is not changing, use the shortcut path
#      {_, ^font_path} ->  put( style, point_size )
#      # putting both is the same as building a new font style
#      _ ->                build( point_size, font_path )
#    end
#  end
#
#  #----------------------------------------------------------------------------
#  def put!( style, size_or_path ) do
#    case put( style, size_or_path ) do
#      {:error, err, msg} ->  raise FileError, message: msg, path: size_or_path, err: err
#      font ->         font
#    end
#  end
#
#  #----------------------------------------------------------------------------
#  def put!( {__MODULE__, _}, point_size, font_path) do
#    # putting both is the same as building a new one
#    build!( point_size, font_path )
#  end
#
#  #============================================================================
#
#  #----------------------------------------------------------------------------
#  defp build_internal(size, path )
#  defp build_internal(size, path )when size < 2,   do: build_internal(2, path)
#  defp build_internal(size, path )when size > 80,  do: build_internal(80, path)
#  defp build_internal( size, path ) when is_integer(size) and is_bitstring(path) do
#    path_length = String.length( path )
#    <<
#      @dflag      :: size(8),
#      @type_code  :: unsigned-integer-size(16)-native,
#      size        :: unsigned-integer-size(8)-native,
#      path_length :: unsigned-integer-size(16)-native,
#      path        :: binary
#    >>
#  end

end