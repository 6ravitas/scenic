defmodule Scenic.Template.Input.RadioButton do
  use Scenic.Template.Input

  alias Scenic.Graph
  alias Scenic.Primitive
  alias Scenic.Primitive.Group
  alias Scenic.Primitive.Rectangle
  alias Scenic.Primitive.RoundedRectangle
  alias Scenic.Primitive.Text
  alias Scenic.Primitive.Style.Color
  alias Scenic.Primitive.Style.Hidden
  alias Scenic.Template.Input
  alias Scenic.Template.Input.RadioButton
  alias Scenic.Viewport.Input.Tracker

#  import IEx

  @default_radius     3

  @text_color         Color.build( :white )
  @box_color          Color.build( :antique_white )
  @check_color        Color.build( :cornflower_blue )

  @hidden             Hidden.build( true )
  @showing            Hidden.build( false )

  @hit_target_color   Color.build( {:dark_green, 0} )

  #----------------------------------------------------------------------------
  def build(data, opts \\ [] )

  def build({chx, text}, opts ) when is_boolean(chx) and is_bitstring(text) do
    r = opts[:r] || opts[:radius] || @default_radius

    check_styles = case chx do
      true ->   [@check_color, @showing]
      false ->  [@check_color, @hidden]
    end

    # build the button graph
    Input.build( opts )
      |> Graph.put_new( 0, Rectangle.build({{-2,-2}, 140, 16}, styles: [@hit_target_color]) )
      |> Graph.put_new( 0, RoundedRectangle.build({{0,0}, 12, 12, r}, styles: [@box_color]) )
      |> Graph.put_new( 0, RoundedRectangle.build({{2,2}, 8, 8, r}, styles: check_styles, tags: [:checkmark]) )
      |> Graph.put_new( 0, Text.build({{16,11}, text}, styles: [@text_color]) )
      |> Graph.put_event_filter(0, {RadioButton, :filter_input})
  end

  #----------------------------------------------------------------------------
  def filter_input(event, id, radio_button, graph) do
    case event do

      {:mouse_down, _ } ->
        {:ok,_} = Tracker.Click.start_link(
          id, Primitive.get_uid( radio_button ),
          Group.get( radio_button )
        )
        {:stop,  graph}

      event ->
        {:continue, event, graph}
    end
  end

end

























